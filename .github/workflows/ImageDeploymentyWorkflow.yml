name: Image Deployment

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  
  

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: csye_6225
      DB_USER: root
      DB_PASSWORD: root
      LOG_PATH: webapp.log
  
    strategy:
      matrix:
          node-version: [21.x]


    steps:
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
      - name: Creating a database
        run: |     
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup envirornment variables
        run: |
          touch .env
          echo DB_NAME=${{ env.DB_DATABASE }} >> .env
          echo DB_USER=${{ env.DB_USER }} >> .env
          echo DB_PASSWORD=${{ env.DB_PASSWORD }} >> .env
          echo LOG_PATH=${{ env.LOG_PATH }} >> .env
          
      - run: npm ci
      - run: npm install sequelize
      - run: npm install mysql2
      - run: npm run build --if-present
      - run: npm test


  image_creation:
    needs: integration-tests
    if: success()
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASSWORD: ${{ vars.DB_PASSWORD }}
    
    outputs:
      image_id: ${{steps.get-image-id.outputs.id_key}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Creating .env file for webapp
        run: |
          touch .env
          echo DB_NAME= >> .env
          echo DB_USER= >> .env
          echo DB_PASSWORD= >> .env
          echo DB_HOST= >> .env
          echo LOG_PATH= >> .env

      - name: Setup envirornment variables for Packer
        run: |
            touch ./packer/variables.pkvars.hcl
            echo project_id=\"${{ secrets.PACKER_PROJECT_ID }}\" >> ./packer/variables.pkvars.hcl
            echo source_image_family=\"${{ secrets.PACKER_SOURCE_IMAGE_FAMILY }}\" >> ./packer/variables.pkvars.hcl
            echo credentials_file_path=\"${{ secrets.PACKER_CREDENTIALS_FILE_PATH }}\" >> ./packer/variables.pkvars.hcl
            echo region=\"${{ secrets.PACKER_REGION }}\" >> ./packer/variables.pkvars.hcl
            echo zone=\"${{ secrets.PACKER_ZONE }}\" >> ./packer/variables.pkvars.hcl
            echo vpc_name=\"${{ secrets.PACKER_VPC_NAME }}\" >> ./packer/variables.pkvars.hcl
            echo webapp_image_family=\"${{ secrets.PACKER_WEBAPP_IMAGE_FAMILY }}\" >> ./packer/variables.pkvars.hcl
            echo ssh_username=\"${{ secrets.PACKER_SSH_USERNAME }}\" >> ./packer/variables.pkvars.hcl
            

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
            name: "./packer/credentials.json"
            json: ${{ secrets.PACKER_DEV_GCP_CRTEDENTIALS }}

      - name: Create Zip File
        run: | 
            zip -r packer/webapp.zip . -x "packer/*" ".github/*" "/packer/webapp.zip"
    
      - name: Packer init
        run: |
            packer init packer/CustomImage.pkr.hcl
  
      - name: Build Image
        run: |
            packer build --var-file="./packer/variables.pkvars.hcl" packer/CustomImage.pkr.hcl

      - name: Get Image Id
        id: get-image-id
        run: |
          cat manifest.json
          artifact_id=$(cat manifest.json | jq '.builds[0].artifact_id')
          echo "id_key=$artifact_id" >> "$GITHUB_OUTPUT"
      

  
  template_creation:
    needs: image_creation
    if: success()
    runs-on: ubuntu-latest
    
    env:
      arifact_id: ${{needs.image_creation.outputs.image_id}}

    steps:
      - name: output image artifact ID
        run: |
            echo "${{ env.arifact_id }}"


     
