name: Image Deployment

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  
  

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: csye_6225
      DB_USER: root
      DB_PASSWORD: root
      LOG_PATH: webapp.log
  
    strategy:
      matrix:
          node-version: [21.x]


    steps:
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
      - name: Creating a database
        run: |     
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup envirornment variables
        run: |
          touch .env
          echo DB_NAME=${{ env.DB_DATABASE }} >> .env
          echo DB_USER=${{ env.DB_USER }} >> .env
          echo DB_PASSWORD=${{ env.DB_PASSWORD }} >> .env
          echo LOG_PATH=${{ env.LOG_PATH }} >> .env
          
      - run: npm ci
      - run: npm install sequelize
      - run: npm install mysql2
      - run: npm run build --if-present
      - run: npm test


  image_creation:
    needs: integration-tests
    if: success()
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USER: ${{ vars.DB_USER }}
      DB_PASSWORD: ${{ vars.DB_PASSWORD }}
    
    outputs:
      image_id: ${{steps.get-image-id.outputs.id_key}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Creating .env file for webapp
        run: |
          touch .env
          echo DB_NAME= >> .env
          echo DB_USER= >> .env
          echo DB_PASSWORD= >> .env
          echo DB_HOST= >> .env
          echo LOG_PATH= >> .env

      - name: Setup envirornment variables for Packer
        run: |
            touch ./packer/variables.pkvars.hcl
            echo project_id=\"${{ vars.PACKER_PROJECT_ID }}\" >> ./packer/variables.pkvars.hcl
            echo source_image_family=\"${{ vars.PACKER_SOURCE_IMAGE_FAMILY }}\" >> ./packer/variables.pkvars.hcl
            echo credentials_file_path=\"${{ vars.PACKER_CREDENTIALS_FILE_PATH }}\" >> ./packer/variables.pkvars.hcl
            echo zone=\"${{ vars.PACKER_ZONE }}\" >> ./packer/variables.pkvars.hcl
            echo webapp_image_family=\"${{ vars.PACKER_WEBAPP_IMAGE_FAMILY }}\" >> ./packer/variables.pkvars.hcl
            echo ssh_username=\"${{ vars.PACKER_SSH_USERNAME }}\" >> ./packer/variables.pkvars.hcl
            

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
            name: "./packer/credentials.json"
            json: ${{ secrets.PACKER_DEV_GCP_CRTEDENTIALS }}

      - name: Create Zip File
        run: | 
            zip -r packer/webapp.zip . -x "packer/*" ".github/*" "/packer/webapp.zip"
    
      - name: Packer init
        run: |
            packer init packer/CustomImage.pkr.hcl
  
      - name: Build Image
        run: |
            packer build --var-file="./packer/variables.pkvars.hcl" packer/CustomImage.pkr.hcl

      - name: Get Image Id
        id: get-image-id
        run: |
          cat manifest.json
          artifact_id=$(cat manifest.json | jq '.builds[0].artifact_id')
          echo "id_key=$artifact_id" >> "$GITHUB_OUTPUT"
      

  
  template_creation:
    needs: image_creation
    if: success()
    runs-on: ubuntu-latest
    
    env:
      arifact_id: ${{needs.image_creation.outputs.image_id}}
    
    outputs:
      template_id: ${{steps.instance-creation.outputs.template_id}}

    steps:
      - uses: actions/checkout@v3

      - name: Check if job1 output is populated
        if: ${{ ! (env.arifact_id == '') }}  # Check for job1's "my_output"
        run: |
          echo "The 'my_output' variable from job1 is populated."
    
      - name: output image artifact ID
        run: |
          echo "${{ env.arifact_id }}"

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.PACKER_DEV_GCP_CRTEDENTIALS }}'
    
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
    
      - name: 'Use gcloud CLI'
        run: 'gcloud info' 

      - name: Updating the startUp Script
        run: |
            cd .github/workflows/
            sed -i 's#${dbName}#${{ secrets.CLOUD_SQL_DB_NAME }}#g' webappInstanceStartUpScript.sh
            sed -i 's#${sqlUser}#${{ secrets.CLOUD_SQL_DB_USER }}#g' webappInstanceStartUpScript.sh
            sed -i 's#${password}#${{ secrets.CLOUD_SQL_PASSWORD }}#g' webappInstanceStartUpScript.sh
            sed -i 's#${host}#${{ secrets.CLOUD_SQL_HOST }}#g' webappInstanceStartUpScript.sh
            sed -i 's#${logFilePath}#${{ vars.WEBAPP_LOG_FILE_PATH }}#g' webappInstanceStartUpScript.sh

      - name: Creating a new Instance Template
        id: instance-creation
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          INSTANCE_TEMPLATE="instance-template-$TIMESTAMP"
          echo "template_id=$INSTANCE_TEMPLATE" >> "$GITHUB_OUTPUT"

          gcloud compute instance-templates create $INSTANCE_TEMPLATE \
            --instance-template-region=${{ vars.TEMPLATE_REGION }} \
            --region=${{ vars.TEMPLATE_REGION }} \
            --machine-type e2-medium \
            --tags=${{ vars.TEMPLATE_TAGS }} \
            --metadata=enable-kms=true \
            --metadata-from-file=startup-script=./.github/workflows/webappInstanceStartUpScript.sh \
            --network-interface=network=${{ vars.VPC_NAME }},subnet=${{ vars.WEBAPP_SUBNET }},stack-type=IPV4_ONLY \
            --service-account=${{ vars.INSTANCE_SERVICE_ACCOUNT }} \
            --create-disk=image=${{ env.arifact_id }},size=50GB,type=pd-balanced,auto-delete=yes,boot=yes,kms-key=${{vars.KMS_INSTANCE_KEY}},kms-keyring=${{vars.KMS_KEYRING}},kms-location=${{vars.KMS_LOCATION}},kms-project=${{vars.KMS_PROJECT}} \
            --scopes=logging-write,monitoring-write,cloud-platform

  instance_update:
    needs: template_creation
    if: success()
    runs-on: ubuntu-latest
              
    env:
      template_id: ${{needs.template_creation.outputs.template_id}}

    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.PACKER_DEV_GCP_CRTEDENTIALS }}'
  
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
  
      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Starting rolling Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ vars.INSTANCE_GROUP_MANAGER }} \
            --version=template=projects/${{ vars.PACKER_PROJECT_ID }}/regions/${{ vars.TEMPLATE_REGION }}/instanceTemplates/${{ env.template_id }} \
            --region=${{ vars.TEMPLATE_REGION }} \
            --max-unavailable=0 
        
      - name: Waiting for the update to complete
        run: |
          gcloud compute instance-groups managed wait-until ${{ vars.INSTANCE_GROUP_MANAGER }} \
            --version-target-reached \
            --region=${{ vars.TEMPLATE_REGION }}

      - name: Waiting for instance group to get stable
        run: |
          gcloud compute instance-groups managed wait-until ${{ vars.INSTANCE_GROUP_MANAGER }} \
            --stable \
            --region=${{ vars.TEMPLATE_REGION }}


     
